{{bip}}

<pre>
  BIP:     BIP-0039
  Title:   Mnemonic code for generating deterministic keys
  Author:  Pavol Rusnak <stick@gk2.sk>
           Marek Palatinus <info@bitcoin.cz>
           Aaron Voisine <voisine@gmail.com>
  Status:  Draft
  Type:    Standards Track
  Created: 10-09-2013
</pre>

==Abstract==

This BIP proposes a scheme for translating binary data (usually master seeds
for deterministic keys, but it can be applied to any binary data) into a group
of easy to remember words also known as mnemonic code or mnemonic sentence.

==Motivation==

Such mnemonic code or mnemonic sentence is much easier to work with than working
with the binary data directly (or its hexadecimal interpretation). The sentence
could be writen down on paper (e.g. for storing in a secure location such as
safe), told over telephone or other voice communication method, or memorized
in ones memory (this method is called brainwallet).

==Backwards Compatibility==

As this BIP is written, only one Bitcoin client (Electrum) implements mnemonic
codes, but it uses a different wordlist than the proposed one.

For compatibility reasons we propose adding a checkbox to Electrum, which will
allow user to indicate if the legacy code is being entered during import or
it is a new one that is BIP-0039 compatible. For exporting, only the new format
will be used, so this is not an issue.

==Rationale==

Our proposal is inspired by implementation used in Electrum, but we enhanced
the wordlist and algorithm so it meets the following criteria:

a) smart selection of words
   - wordlist is created in such way that it's enough to type just first four
     letters to unambiguously identify the word

b) similar words avoided
   - words as "build" and "built", "woman" and "women" or "quick" or "quickly"
     not only make remembering the sentence difficult, but are also more error
     prone and more difficult to guess (see point below)
   - we avoid these words by carefully selecting them during addition

c) sorted wordlists
   - wordlist is sorted which allow more efficient lookup of the code words
     (i.e. implementation can use binary search instead of linear search)
   - this also allows trie (prefix tree) to be used, e.g. for better compression

d) localized wordlists
   - we would like to allow localized wordlists, so it is easier for users
     to remember the code in their native language
   - by using wordlists with no colliding words among languages, it's easy to
     determine which language was used just by checking the first word of
     the sentence

e) mnemonic checksum
   - this leads to better user experience, because user can be notified
     if the mnemonic sequence is wrong, instead of showing the confusing
     data generated from the wrong sequence. 

==Specification==

<pre>
Our proposal implements two methods - "encode" and "decode".

The first method takes a binary data which have to length (L) in bytes divisable
by four and returns a sentence that consists of (L/4*3) words from the wordlist.

The second method takes sentences generated by first method (number of words in
the sentence has to be divisable by 3) and reconstructs the original binary data.

Words can repeat in the sentence more than one time.

Wordlist contains 2048 words (instead of 1626 words in Electrum), allowing
the code to compute the checksum of the whole mnemonic sequence.
Each 32 bits of input data add 1 bit of checksum.

See the following table for relation between input lengths, output lengths and
checksum sizes for the most common usecases:

+--------+---------+---------+----------+
| input  |  input  | output  | checksum |
| (bits) | (bytes) | (words) |  (bits)  |
+--------+---------+---------+----------+
|   128  |    16   |    12   |     4    |
|   160  |    20   |    15   |     5    |
|   192  |    24   |    18   |     6    |
|   224  |    28   |    21   |     7    |
|   256  |    32   |    24   |     8    |
+--------+---------+---------+----------+
</pre>

===Algorithm:===

<pre>
Encoding:
1. Read input data (I).
2. Make sure its length (L) is divisable by 32 bits.
3. Compute the length of the checkum (LC). LC = L/32
4. Split I into chunks of LC bits (I1, I2, I3, ...).
5. XOR them altogether and produce the checksum C. C = I1 xor I2 xor I3 ... xor In.
5. Concatenate I and C into encoded data (E). Length of E is divisable by 33 bits.
6. Keep taking 11 bits from E until there are none left.
7. Treat them as integer W, add word with index W to the output.

Decoding:
1. Read input mnemonic (M).
2. Make sure its wordcount is divisable by 3.
3. Figure out word indexes in a dictionary and output them as binary stream E.
4. Length of E (L) is divisable by 33 bits.
5. Split E into two parts: B and C, where B are first L/33*32 bits, C are last L/33 bits.
6. Make sure C is the checksum of B (using the step 5 from the above paragraph).
7. If it's not we have invalid mnemonic code.
8. Treat B as binary data and return it as output.

</pre>

==Test vectors==

<pre>
input    : 00000000 (32 bits)
mnemonic : ability ability ability (3 words)

input    : 7f7f7f7f (32 bits)
mnemonic : linger wire take (3 words)

input    : 80808080 (32 bits)
mnemonic : load agree can (3 words)

input    : ffffffff (32 bits)
mnemonic : zoom zoom zoo (3 words)

input    : 0000000000000000 (64 bits)
mnemonic : ability ability ability ability ability ability (6 words)

input    : 7f7f7f7f7f7f7f7f (64 bits)
mnemonic : linger wire take yet wealth salon (6 words)

input    : 8080808080808080 (64 bits)
mnemonic : load agree cancel accident ape donkey (6 words)

input    : ffffffffffffffff (64 bits)
mnemonic : zoom zoom zoom zoom zoom zip (6 words)

input    : 000000000000000000000000 (96 bits)
mnemonic : ability ability ability ability ability ability ability ability ability (9 words)

input    : 7f7f7f7f7f7f7f7f7f7f7f7f (96 bits)
mnemonic : linger wire take yet wealth salt wrinkle uniform lime (9 words)

input    : 808080808080808080808080 (96 bits)
mnemonic : load agree cancel accident ape door actress bat list (9 words)

input    : ffffffffffffffffffffffff (96 bits)
mnemonic : zoom zoom zoom zoom zoom zoom zoom zoom yield (9 words)

input    : 00000000000000000000000000000000 (128 bits)
mnemonic : ability ability ability ability ability ability ability ability ability ability ability ability (12 words)

input    : 7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f (128 bits)
mnemonic : linger wire take yet wealth salt wrinkle uniform linger wire take wrist (12 words)

input    : 80808080808080808080808080808080 (128 bits)
mnemonic : load agree cancel accident ape door actress bat load agree cancel ability (12 words)

input    : ffffffffffffffffffffffffffffffff (128 bits)
mnemonic : zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom wrist (12 words)

input    : 0000000000000000000000000000000000000000 (160 bits)
mnemonic : ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability (15 words)

input    : 7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f (160 bits)
mnemonic : linger wire take yet wealth salt wrinkle uniform linger wire take yet wealth salt wisdom (15 words)

input    : 8080808080808080808080808080808080808080 (160 bits)
mnemonic : load agree cancel accident ape door actress bat load agree cancel accident ape door ability (15 words)

input    : ffffffffffffffffffffffffffffffffffffffff (160 bits)
mnemonic : zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom wisdom (15 words)

input    : 000000000000000000000000000000000000000000000000 (192 bits)
mnemonic : ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability (18 words)

input    : 7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f (192 bits)
mnemonic : linger wire take yet wealth salt wrinkle uniform linger wire take yet wealth salt wrinkle uniform linger weapon (18 words)

input    : 808080808080808080808080808080808080808080808080 (192 bits)
mnemonic : load agree cancel accident ape door actress bat load agree cancel accident ape door actress bat load ability (18 words)

input    : ffffffffffffffffffffffffffffffffffffffffffffffff (192 bits)
mnemonic : zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom weapon (18 words)

input    : 00000000000000000000000000000000000000000000000000000000 (224 bits)
mnemonic : ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability (21 words)

input    : 7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f (224 bits)
mnemonic : linger wire take yet wealth salt wrinkle uniform linger wire take yet wealth salt wrinkle uniform linger wire take yet unique (21 words)

input    : 80808080808080808080808080808080808080808080808080808080 (224 bits)
mnemonic : load agree cancel accident ape door actress bat load agree cancel accident ape door actress bat load agree cancel accident ability (21 words)

input    : ffffffffffffffffffffffffffffffffffffffffffffffffffffffff (224 bits)
mnemonic : zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom unique (21 words)

input    : 0000000000000000000000000000000000000000000000000000000000000000 (256 bits)
mnemonic : ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability ability (24 words)

input    : 7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f (256 bits)
mnemonic : linger wire take yet wealth salt wrinkle uniform linger wire take yet wealth salt wrinkle uniform linger wire take yet wealth salt wrinkle talk (24 words)

input    : 8080808080808080808080808080808080808080808080808080808080808080 (256 bits)
mnemonic : load agree cancel accident ape door actress bat load agree cancel accident ape door actress bat load agree cancel accident ape door actress ability (24 words)

input    : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff (256 bits)
mnemonic : zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom zoom talk (24 words)

input    : 8c1aa01830b65116dcc0682f1a3c7793 (128 bits)
mnemonic : miss sponge amaze grab hack mine invite bacon copper song bus chicken (12 words)

input    : 736da94e1dcd0e6d4c169628cb5118e4130ddbe41ae96a6d (192 bits)
mnemonic : issue huddle flap detail social damage cousin spa clay full egg shoot crab twice mule gather hog hurl (18 words)

input    : b1b4ad91c27ee8e85cdc5457117cb886f10b9cffb7e0c5fc818479f4aaff2066 (256 bits)
mnemonic : rash pocket gum magnet type jar issue middle fool mirror connect bald beach slope yellow wisdom shaft throw goose vine evidence link logo shield (24 words)

input    : f6a8daccf4268960b0daf3bf6dfb94e0 (128 bits)
mnemonic : want elephant reason touch hen rail second giant salad identify time school (12 words)

input    : 4535b0ae422554a47ad2ef9e36f43f2d55360365fda259b5 (192 bits)
mnemonic : easy pure clutch lure floor finger trot genius past result basic fun flame act offer reflect front quote (18 words)

input    : 6089b09d61fa43497b4e5b4f1fc76515ccf55de916b53a5c48b79d3d5a54b2a3 (256 bits)
mnemonic : goal fake chuckle sedan plastic plow tunnel skate father writer stone clutch smear quick plate stage dentist text cone deny sprout clock since last (24 words)

input    : a3b253af8ef7ede7be67bfa172ffdba6 (128 bits)
mnemonic : pitch nation trumpet bus like village while wealth physical offer warn expose (12 words)

input    : a76d9c7c1ebea7f7c039bee04000de0b1f4e8a121e12b5b7 (192 bits)
mnemonic : portion how cable dinner triangle wire access data tan ability dart blossom void east enhance scout remember salute (18 words)

input    : 3333c848c2ad26f52af8df4dfc42d0c259ed8818c8a91371fcd53e2dc2583442 (256 bits)
mnemonic : crop pat bell make soup last proud budget family term reduce machine pattern see grit blast beyond mud curl leave super coat socket dwell (24 words)

input    : 36c0fe7be0b7a93715c6cd4da2fd0f05 (128 bits)
mnemonic : damp apart pause scatter last own fool store fall booster dusk athlete (12 words)

input    : 872beb3427f36d92d298a58d59a049eef01c255a8f56d417 (192 bits)
mnemonic : master glance slack felt damp shy even bitter money slack belt swim action bend hit trigger spider risk (18 words)

input    : ff466781d590204f02661a00d05444ef7a4dc9be5e837bdcb8efbec9a73ff561 (256 bits)
mnemonic : youth crop tangle promote actress churn arrange seat absurd lot bed syrup pluck tiger where sneak leader tissue device let original pencil spring child (24 words)
</pre>

==Reference Implementation==

Reference implementation including wordlists is available from http://github.com/trezor/python-mnemonic
